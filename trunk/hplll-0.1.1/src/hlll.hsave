/* Householer LLL 

Created Mar 18 jan 2011 18:08:24 CET  
Copyright (C) 2011, 2012, 2013      Gilles Villard 

This file is part of the hplll Library 

The hplll Library is free software; you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at your
option) any later version.

The hplll Library is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
License for more details.

You should have received a copy of the GNU Lesser General Public License
along with the hplll Library; see the file COPYING.LESSER.  If not, see
http://www.gnu.org/licenses/ or write to the Free Software Foundation, Inc.,
51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA. */


#ifndef HLLL_H
#define HLLL_H

#include"ldpe.h"
#include"nr-ld.cpp"

#include"fplll.h"


using namespace fplll;

template<class ZT, class FT>
class Lattice
{
 protected:

  matrix<Z_NR<ZT> > B;

  matrix<Z_NR<ZT> > U;

  int n,d; 

  int chrono;
  bool transf;

  int nmaxkappa;

  // Floating point objects concerned a possible precision change 
  // ************************************************************

  matrix<FP_NR<FT> > R;
  matrix<FP_NR<FT> > Rkept;

  matrix<FP_NR<FT> > V;

  matrix<FP_NR<FT> > VR;
  vector<FP_NR<FT> > normB2; // Square norm 
  matrix<FP_NR<FT> > Bfp; // floating point B 

  vector<int> structure; 

  vector<int> col_kept;

  vector<int> kappamin;
 
  vector<int> descendu;

public:

  // Timings 
  // ******* 
  unsigned int tps_reduce;
  unsigned int tps_householder;
  unsigned int tps_prepare;
  unsigned int tps_swap;
  int nblov,nbswaps;
  unsigned int tps_redB;

  int compteur;   // while counting   

  int householder_r(int kappa); 
  int householder_v(int kappa); 

  int householder();
  
  int hsizereduce(int kappa);
  int seysenreduce(int kappa);

  int hlll(long double delta);

  unsigned int setprec(unsigned int prec);
  unsigned int getprec();

  void isreduced(long double delta);

  FP_NR<FT> cond();
  FP_NR<FT> tnull(int time);  // Stats nullspace 

  FP_NR<FT> energy();

  ZZ_mat<ZT> getbase();

  ZZ_mat<ZT> getU();

  matrix<FP_NR<FT> > getR();

  Lattice(ZZ_mat<ZT> A, bool forU, int gchrono); 

  Lattice(ZZ_mat<ZT> A, long t, long sigma, bool forU, int gchrono); 

  void init(int n, int d, bool forU, int gchrono);

  void put(ZZ_mat<ZT> A, long t, long sigma); 

  void shift(ZZ_mat<ZT> A, long m, long sigma); 

  //~Lattice();
};

#endif
